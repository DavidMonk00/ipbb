#!/usr/bin/env python
from __future__ import print_function


#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Modules
import click
import subprocess
import ipbb

# Elements
from click_shell import shell
from os.path import join, split, exists, splitext

#------------------------------------------------------------------------------
# Add -h as default help option
CONTEXT_SETTINGS = dict(help_option_names=['-h', '--help'])
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
@shell(
  prompt=click.style('ipbb', fg='blue')+'> ',
  intro='Starting IPBus Builder...',
  context_settings=CONTEXT_SETTINGS
)
@click.pass_context
def cli(ctx):
  ctx.obj = ipbb.Environment()

  print (vars(ctx))
  # Print warning message if in command-line mode (no arguments) and we are not in an ipbb area.
  if not ctx.protected_args and not ctx.invoked_subcommand:
    print (ctx.obj)
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
@cli.command()
@click.option('-v', '--verbose', count=True, help='arse')
@click.pass_obj
def info(env, verbose):
  '''WORK IN PROGRESS: Tentative command to set up shell env'''
  # print( 'export IPBB_ROOT=%s' % env.root)
  # print( 'export IPBB_WORK=%s' % env.project)
  print ( env )
#------------------------------------------------------------------------------


#------------------------------------------------------------------------------
if __name__ == '__main__':
  '''Discovers the env at startup'''
  # ipbb.env = ipbb.Environment()
  # print(ipbb.__env)

  # Logging is important
  # import logging
  # logging.basicConfig(level=logging.DEBUG)
    
  # Add custom commands to shell
  import ipbb.repo
  cli.add_command(ipbb.repo.init)
  cli.add_command(ipbb.repo.lswork)
  cli.add_command(ipbb.repo.chroot)
  cli.add_command(ipbb.repo.chwork)
  cli.add_command(ipbb.repo.add)

  import ipbb.proj
  cli.add_command(ipbb.proj.proj)

  import ipbb.dep
  cli.add_command(ipbb.dep.dep)

  import ipbb.vivado
  cli.add_command(ipbb.vivado.vivado)

  import ipbb.sim
  cli.add_command(ipbb.sim.sim)

  cli.shell.prompt = '\x1b[38;5;74m'+cli.shell.prompt+'\x1b[0m'
  cli()
#------------------------------------------------------------------------------
